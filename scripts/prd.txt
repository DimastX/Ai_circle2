# Product Requirements Document: Математически обоснованные сценарии VSL управления

## Обзор продукта
Реализация математически обоснованной системы Variable Speed Limit (VSL) управления для оптимизации дорожного трафика с использованием четырех научно обоснованных сценариев с точными математическими формулами.

## Общая структура изменений
1. Удаление `vsl_config.yml` - все параметры рассчитываются динамически
2. Модификация `eidm_stability_analysis.py` для автоматического расчета коэффициентов
3. Интеграция математических формул в `vsl_calculator.py`
4. Динамическая инициализация PID параметров в `vsl_controller.py`

## Сценарий 1: Оптимизация средней скорости

### Целевая функция
Максимизация средней скорости: J = max (1/T) ∫[0,T] v(t) dt

### Управляющее воздействие
VSL(t) = v_max * (1 - (ρ(t)/ρ_crit(T'))^0.7)

### Коэффициенты PID
- K_p = 0.6 + 0.2 * (T'/0.9)
- K_i = 0.12 * exp(-T'/0.5)  
- K_d = 0.08 * (1 + T'/0.9)
- ρ_crit(T') = 1/(s_0 + v_0*T + L_veh) * (1 - 0.3*T')

где s_0 = 2.0м, v_0 = 30.0м/с, T = 1.5с, L_veh = 5.0м

## Сценарий 2: Минимизация дисперсии скорости

### Целевая функция  
Минимизация дисперсии: J = min ∫[0,T] (v(t) - v̄)² dt

### Управляющее воздействие
VSL(t) = 100 * (1 - ρ(t)/(0.8 * ρ_crit(T')))

### Коэффициенты PID
- K_p = 0.8 + 0.3 * min(stability_margin, 1.0)
- K_i = 0.05 / (1 + 2*T')
- K_d = 0.15 * (1 + 0.5*T')
- stability_margin = exp(-T'/0.9) * (f_v²/2 - f_dv*f_v - f_s)

где f_v, f_dv, f_s - парциальные производные IDM

## Сценарий 3: Подавление stop-and-go волн

### Целевая функция
Минимизация колебаний: J = min ∫[t-T,t] (dv/dt)² dτ

### Управляющее воздействие  
VSL(t) = 80 * (1 + 0.5 * tanh(5 * (ρ_crit(T') - ρ(t))))

### Коэффициенты PID
- K_p = 1.0 * (1 + 0.5 * T'/0.9)
- K_i = 0.08 * exp(-2 * T'/0.9)
- K_d = 0.2 * (1 + T'/0.9)
- ρ_crit(T') = 0.6*ρ_crit⁰ при T' > 0.9с, иначе 0.75*ρ_crit⁰

## Сценарий 4: Максимизация пропускной способности

### Целевая функция
Максимизация потока: J = max ∫[0,T] q(t) dt

### Управляющее воздействие
VSL(t) = q_max/ρ(t) * (1 - exp(-ρ(t)/ρ_crit(T')))

### Коэффициенты PID  
- K_p = 0.5 / (1 + T')
- K_i = 0.15 * (1 - 0.3*T')
- K_d = 0.05
- q_max = ρ_crit(T') * v_opt * (1 - ρ_crit(T')/ρ_jam)

## Технические требования реализации

### Новый модуль vsl_calculator.py
```python
import numpy as np
from dataclasses import dataclass

@dataclass
class VSLParams:
    kp: float
    ki: float
    kd: float
    target_density: float
    vsl_bounds: tuple

class VSLOptimizer:
    def __init__(self, T_prime: float):
        self.T_prime = T_prime  # Время реакции водителя
    
    def calculate_critical_density(self) -> float:
        s0 = 2.0   # Минимальная дистанция
        v0 = 30.0  # Желаемая скорость
        T = 1.5    # Время следования
        L_veh = 5.0
        
        s_star = s0 + v0*T
        return (1000 / (s_star + L_veh)) * (1 - 0.3*(self.T_prime/0.9)**2)
    
    def get_scenario_params(self, scenario: str) -> VSLParams:
        # Реализация для каждого сценария...
```

### Модификация существующих файлов
1. **vsl_controller.py**: Интеграция VSLOptimizer, удаление зависимости от конфигурационного файла
2. **eidm_stability_analysis.py**: Добавление автоматического расчета коэффициентов устойчивости
3. **run_circle_simulation.py**: Добавление параметра --vsl-scenario для выбора сценария

### Параметры командной строки
- `--vsl-scenario`: выбор сценария (speed/variance/wave/throughput)
- `--T-prime`: время реакции водителя (0.5-1.5с)
- `--idm-params`: параметры IDM (v0, T, s0)

## Математические основы

### Базовые параметры IDM
- s_0: минимальная дистанция (2.0м)
- v_0: желаемая скорость (30.0м/с) 
- T: время следования (1.5с)
- a: максимальное ускорение (1.0м/с²)
- b: комфортное торможение (1.5м/с²)
- δ: экспонента скорости (4)

### Расчет критической плотности
ρ_crit базируется на фундаментальной диаграмме:
- s_star = s_0 + v_0*T + L_veh
- ρ_crit = 1000/s_star (автомобилей/км)
- Адаптация под время реакции T'

### Анализ устойчивости
Парциальные производные IDM для линеаризации:
- f_s = ∂(dv/dt)/∂s (влияние расстояния)
- f_v = ∂(dv/dt)/∂v (влияние скорости)  
- f_v0 = ∂(dv/dt)/∂v0 (влияние желаемой скорости)

## Критерии приемки
- Все четыре сценария реализованы с точными математическими формулами
- Динамический расчет всех коэффициентов без конфигурационных файлов
- Параметры адаптируются к времени реакции водителя T' (0.5-1.5с)
- Совместимость с существующей SUMO-симуляцией
- Валидация результатов сравнением с данными I-24 MOTION

## Инструкции по запуску
```bash
# Анализ устойчивости для сценария подавления волн
python src/eidm_stability_analysis.py --vsl-scenario wave

# Симуляция с оптимизацией средней скорости
python src/run_circle_simulation.py --vsl-scenario speed --T-prime 0.8

# Симуляция минимизации дисперсии
python src/run_circle_simulation.py --vsl-scenario variance --T-prime 1.0

# Максимизация пропускной способности
python src/run_circle_simulation.py --vsl-scenario throughput --T-prime 0.6
```

## Ключевые особенности
- **Динамический расчет**: Все коэффициенты вычисляются в реальном времени
- **Научная обоснованность**: Формулы основаны на анализе устойчивости IDM
- **Адаптивность**: Учет времени реакции водителя T' в диапазоне 0.5-1.5с
- **4 готовых сценария**: Каждый с уникальной целевой функцией и управлением
- **Полная интеграция**: Совместимость с существующей архитектурой

## Валидация
- Сравнение с полевыми данными проекта I-24 MOTION
- Проверка математических расчетов через юнит-тесты
- Тестирование устойчивости системы при различных T'
- Анализ эффективности каждого сценария 